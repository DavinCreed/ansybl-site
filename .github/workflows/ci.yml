name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-php:
    name: PHP Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: [8.0, 8.1, 8.2, 8.3]

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: json, mbstring
        coverage: xdebug

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-

    - name: Install PHP dependencies
      run: composer install --prefer-dist --no-progress

    - name: Create data directories
      run: |
        mkdir -p data/cache data/config data/styles
        chmod 755 data data/cache data/config data/styles

    - name: Run PHP tests
      run: ./vendor/bin/phpunit --coverage-clover coverage.xml

    - name: Upload PHP coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: php
        name: php-coverage

  test-javascript:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install JavaScript dependencies
      run: npm ci

    - name: Run JavaScript tests
      run: npm run test:coverage

    - name: Upload JavaScript coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: javascript
        name: js-coverage

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: json, mbstring

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress
        npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run PHP CS Fixer (if configured)
      run: |
        if [ -f .php-cs-fixer.php ]; then
          ./vendor/bin/php-cs-fixer fix --dry-run --diff
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run security audit
      run: composer audit

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install npm dependencies
      run: npm ci

    - name: Run npm audit
      run: npm audit --audit-level=moderate

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test-php, test-javascript, lint]

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: json, mbstring

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-dev --optimize-autoloader
        npm ci

    - name: Create data directories
      run: |
        mkdir -p data/cache data/config data/styles
        chmod 755 data data/cache data/config data/styles

    - name: Build application
      run: npm run build

    - name: Test PHP server startup
      run: |
        timeout 10s php -S localhost:8000 -t public > server.log 2>&1 &
        sleep 3
        curl -f http://localhost:8000 || (cat server.log && exit 1)

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Generate documentation
      run: |
        # Add documentation generation if needed
        echo "Documentation generation placeholder"

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        enable_jekyll: false